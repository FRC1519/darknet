#!/bin/bash

# Set directories
declare -r bin=$(readlink -m "$(dirname "${BASH_SOURCE[0]}")")
declare -r share=$(readlink -m "$bin/../share/robot")
declare -r sddata="/media/nvidia/test/trainingdata"
declare var="/var/local/robot"
declare -r coredir=$var
[[ -d $sddata ]] && var=$sddata

# Set video configuration
declare -r threshold="0.15"
declare -r cap_fps="15/1"
declare -r bitrate=250000
declare -r stream_fps="5/1"
declare -r stream_width="320" #"432"
declare -r stream_height="180" #"240"
declare -r iframe="1000" # in ms
declare -r -i cap_avg_frame=81 # in KB, for space computation

# Exit with an error
function die() {
    printf 'ERROR: %s\n' "$@" >&2
    exit 1
}

# Kill a running process
function killit() {
    declare prog=$1
    declare -i cnt=0

    pgrep -x "$prog" &>/dev/null && echo "Stopping previous instance of $prog ..." && pkill -x "$prog" && sleep 0.5
    pgrep -x "$prog" &>/dev/null && echo "Killing previous instance of $prog ..." && pkill -x --signal KILL "$prog"
    while pgrep -x "$prog" &>/dev/null; do
        [[ $cnt -lt 10 ]] || die "Gave up waiting for $prog to die"
        sleep 0.5
        cnt+=1
    done
    return 0
}

# Ensure root access
[[ $(id -u) == 0 ]] || die "Running as root is required"

# Set the time if provided
declare -r datetime=$1
if [[ $datetime ]]; then
    date --set="$datetime" || die "Failed to set time to '$datetime'"
    hwclock --systohc || echo "WARNING: failed to set hardware clock" >&2
fi

# Determine IP addresses to use
declare -r netdev="eth0"
declare oi_ip
declare robot_ip
if ip address show dev "$netdev" | grep -q 'inet 192.168.0'; then
    # Development environment
    oi_ip="192.168.0.51"
    #oi_ip="192.168.0.56"
    robot_ip="127.0.0.1"
else
    # Field environment
    oi_ip="10.15.19.5"
    robot_ip="10.15.19.2"
fi

# Detect which camera is where
declare cam1 cam2
if [[ -e /sys/devices/3530000.xhci/usb1/1-2/1-2\:1.0/ ]]; then
    echo "USB hub detected"
    cam1=(/sys/devices/3530000.xhci/usb1/1-2/1-2.4/1-2.4:1.0/video4linux/video*)
    cam2=(/sys/devices/3530000.xhci/usb1/1-2/1-2.3/1-2.3:1.0/video4linux/video*)
else
    echo "No USB hub detected"
    cam1=(/sys/devices/3530000.xhci/usb1/1-2/1-2:1.0/video4linux/video*)
    cam2=(/sys/devices/3530000.xhci/usb1/1-1/1-1:1.0/video4linux/video*)
fi
cam1=${cam1##*/video}
[[ $cam1 != "*" ]] || die "Failed to find primary camera"
cam2=${cam2##*/video}
[[ $cam2 != "*" ]] || die "Failed to find secondary camera"

# Set file locations
declare -r -a cfg_files=("$share/obj.data" "$share/tiny-yolo-obj.cfg" "$share/tiny-yolo-obj.backup")
declare -r timestamp=$(date --iso-8601=seconds | tr -d :)
declare -r video="$var/capture-cam%d-$timestamp.avi"
declare -r datalog="$var/datalog-$timestamp.csv"
declare -r netlog="$var/network-$timestamp.csv"
declare -r iperflog="$var/iperf-$timestamp.txt"
declare -r iperfjsonlog="$var/iperf-$timestamp.json"

# Check disk space
declare -r -i req_minutes=15 # How many minutes we should be able record
declare -r -i min_space=$((cap_avg_frame * cap_fps * 2 * 60 * req_minutes))
declare -r -i free_space=$(df -k "$var" | awk 'NR==2 {print $4}')
[[ $free_space -ge $min_space ]] || die "Not enough free space.  Need $min_space KB, only have $free_space KB"

# Ensure that any previous instances have exited
killit robot

# Start the network logger
killit netlog
"$bin"/netlog "$netdev" "$netlog" &

# Start the iperf server (one with JSON, one without, unless we settle on a preference)
killit iperf3
iperf3 --server --daemon --verbose --format k --logfile "$iperflog" --port 1188
iperf3 --server --daemon --verbose --format k --json --logfile "$iperfjsonlog" --port 5808

# We want core dumps! (if we crash)
ulimit -c unlimited
echo "$coredir/core_%e.%p.%s" > /proc/sys/kernel/core_pattern

# Run robot vision program
cd "$share"
export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"
"$bin"/robot --gpu 0 --thresh "$threshold" --camera "$cam1" --camera2 "$cam2" --fps "$cap_fps" --stream-width "$stream_width" --stream-height "$stream_height" --stream-fps "$stream_fps" --bitrate "$bitrate" --iframe "$iframe" --oper-ip "$oi_ip" --robot-ip "$robot_ip" --video "$video" --data-log "$datalog" "${cfg_files[@]}"
